{"version":3,"sources":["components/AddCategory.js","components/GifItem.js","helpers/getGifs.js","hooks/useFetchGifs.js","components/GifGrid.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categ","type","value","onChange","target","GifItem","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","id","images","downsized_medium","useFetchGifs","loading","state","setState","useEffect","then","imgs","GifGrid","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"4LAoCeA,EAjCM,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAELC,mBAAS,IAFJ,mBAElCC,EAFkC,KAEtBC,EAFsB,KAmBxC,OACE,sBAAMC,SAZW,SAACC,GAClBA,EAAEC,iBAGCJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAAAS,GAAK,MAAI,CAACP,MACxBC,EAAc,MAMf,SACE,uBACAO,KAAK,OACLC,MAAOT,EACPU,SApBoB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,a,OCIVG,EAVC,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IACrB,OACI,sBAAKC,UAAU,yCAAf,UACC,qBAAKC,IAAKF,EAAKG,IAAKJ,IACnB,4BAAIA,Q,uBCHAK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACdN,EADc,iDACkCO,UAAUF,GAD5C,+DAEDG,MAAMR,GAFL,cAEdS,EAFc,gBAGCA,EAAKC,OAHN,uBAGbC,EAHa,EAGbA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAO,IAAD,EAC1B,MAAO,CACLC,GAAID,EAAIC,GACRhB,MAAOe,EAAIf,MACXC,IAAG,UAAGc,EAAIE,cAAP,aAAG,EAAYC,iBAAiBjB,QATnB,kBAabY,GAba,4CAAH,sDCwBNM,EAvBM,SAACb,GAAc,IAAD,EAELpB,mBAAS,CAC/B0B,KAAK,GACLQ,SAAQ,IAJmB,mBAExBC,EAFwB,KAEjBC,EAFiB,KAoB/B,OAbFC,qBAAU,WACTlB,EAAQC,GAELkB,MAAK,SAAAC,GAGJH,EAAS,CACNV,KAAMa,EACNL,SAAS,SAGjB,CAACd,IAEQe,GCKIK,EAxBC,SAAC,GAAgB,IAAfpB,EAAc,EAAdA,SAAc,EAECa,EAAab,GAAhCW,EAFkB,EAEvBL,KAAaQ,EAFU,EAEVA,QAIpB,OACE,qCACK,oBAAIlB,UAAU,oCAAd,SAAmDI,IACnDc,GAAW,mBAAGlB,UAAU,mCAAb,wBAChB,qBAAKA,UAAW,YAAhB,SAEKe,EAAOH,KAAI,SAAAC,GAAG,OACb,cAAC,EAAD,eAEGA,GADEA,EAAIC,aCeJW,EA9BM,WAAO,IAAD,EAEWzC,mBAAS,CAAC,cAFrB,mBAElB0C,EAFkB,KAEN3C,EAFM,KAUzB,OACE,qCACC,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACE,6BAEQ2C,EAAWd,KAAI,SAAAR,GAAQ,OACpB,cAAC,EAAD,CAEAA,SAAUA,GADLA,Y,MChBvBuB,IAASC,OAEL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.58c478a0.chunk.js","sourcesContent":["import React, {useState} from 'react'\nimport PropTypes from 'prop-types'; \n\n const AddCategory = ({setCategories}) => {\n\n const [inputValue, setInputValue] = useState('');\n\nconst handleInputChange = (e) =>{\n  setInputValue(e.target.value)\n}\n\nconst handleSubmit = (e) => {\n    e.preventDefault();\n   // console.log('submit hecho')\n   //estoy trayendo como props a setCategories que tiene el estado anterior de categories y va a retornar un nuevo array con el inputValue\n    if(inputValue.trim().length > 2){\n     setCategories(categ => [inputValue])\n     setInputValue('')\n    }\n  \n}\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n      type=\"text\"\n      value={inputValue}\n      onChange={handleInputChange}\n      />\n    </form>\n  )\n}\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired\n}\nexport default AddCategory\n","import React from 'react'\n\nconst GifItem = ({title, url}) => {\n    return (\n        <div className=\"card animate__animated animate__bounce\">\n         <img src={url} alt={title}/>\n          <p>{title}</p>\n        </div>\n    )\n}\n\n\nexport default GifItem\n","  \n  \n  //hace petición a la Api, devuelve la respuesta (data) en un json\n export const getGifs = async (category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=BBfWfDdQG8IeCgwxRU6JVKVynznacrue`\n    const resp = await fetch(url);\n    const {data} = await resp.json();\n// recorro la data y extraigo el id, title, imagen\n    const gifs = data.map(img =>{\n      return {\n        id: img.id,\n        title: img.title,\n        url : img.images?.downsized_medium.url\n      }\n    })\n\n    return gifs;\n}\n","import {useState, useEffect} from 'react'\nimport {getGifs} from '../helpers/getGifs';\n\n//category que paso por argumento va a caer como si fueran props\nconst useFetchGifs = (category) => {\n    \n    const [state, setState] = useState({\n        data:[],\n        loading:true\n    });\n   //hace el efecto cuando solo cambia la categoría \n  useEffect(() =>{\n   getGifs(category)\n   //devuelve una promesa con las imagenes\n     .then(imgs => {\n \n    //cuando tenemos la data se llama al setState cambiando la informacion, el setState va a disparar una renderización en mi componente (gifGrid)\n       setState({\n          data: imgs,\n          loading: false\n      });\n  })\n},[category])\n\n    return state;\n}\n\nexport default useFetchGifs;","import React from 'react';\n import GifItem from './GifItem';\nimport useFetchGifs from '../hooks/useFetchGifs';\n\n//me traigo como props category que es mi array con la categoria \nconst GifGrid = ({category}) => {\n //a data lo puedo renombrar con images\n  const {data:images, loading} = useFetchGifs(category);\n  \n\n\n  return (\n    <>\n         <h3 className=\"animate__animated animate__fadeIn\">{category}</h3> \n        {loading && <p className=\"animate__animated animate__flash\">Loading...</p>}\n    <div className= \"card-grid\">\n       { \n         images.map(img => (\n          <GifItem  \n          key={img.id}\n         {...img}\n          /> \n         ))\n       }\n    </div>\n    </>\n  )\n}\n\nexport default GifGrid\n","import React, {useState} from 'react'\nimport AddCategory from './components/AddCategory'\nimport GifGrid from './components/GifGrid'\n\nconst GifExpertApp = () => {\n\n  const [categories, setCategories] = useState(['One Punch'])\n\n  // esto aca no se usa lo deje a modo de ejemplo\n  // const handleAdd = ()=> {\n  //    setCategories([...categories, 'Hunter'])\n  // }\n\n  \n  return (\n    <>\n     <h2>GifExpertApp</h2>\n     <AddCategory setCategories={setCategories}/>\n     <hr/> \n       <ol>\n           {\n               categories.map(category => (\n                  <GifGrid \n                  key={category}\n                  category={category} />\n                  ))\n               \n               }\n       </ol>\n\n    </>\n  )\n}\n\nexport default GifExpertApp\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\n\n\nimport './index.css';\n\nReactDOM.render(\n  \n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}